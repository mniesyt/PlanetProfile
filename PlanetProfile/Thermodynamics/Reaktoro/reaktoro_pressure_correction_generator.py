from PlanetProfile.Thermodynamics.Reaktoro.reaktoroPropsHelperFunctions import SpeciesParser, PhreeqcGeneratorForChemicalConstraint, reset_state
from seafreeze import seafreeze as sfz
import numpy as np
import pickle
import logging
import reaktoro as rkt
log = logging.getLogger('PlanetProfile')
import os

def dictionary_pressure_correction_generator():
    log.debug(f"Reaktoro's current implementation of Frezchem does not properly correct for the effect of pressure. In order to remedy this correction,\n" +
    f"we create an internal correction spline that is generated by comparing the difference in freezing temperatures between a pure solution of water of Reaktoro and Seafreeze over a range of pressures\n."
                + f"We then apply this spline to adjust the calculated equilibrium temperatures for Reaktoro." +
              f"This spline is generated once (even if you aren't using Reaktoro) and saved to a pickle file so it doesn't have to be generated again")

    eos_P_MPa = np.linspace(0.1, 100, 300)
    eos_T_K = np.linspace(260, 274, 600)
    eos_PT = np.array([eos_P_MPa, eos_T_K], dtype=object)
    sfz_phases = sfz.whichphase(eos_PT)
    diff = np.diff(sfz_phases)
    sfz_T_freezing = []
    for row in diff:
        i = np.where(row == -1.0)[0]
        sfz_T_freezing.append(((eos_T_K[i] + eos_T_K[i+1])/2)[0])


    pure_water_speciation = "H+: 1e-7, OH-: 1e-7"
    aqueous_species_list, speciation_ratio_mol_kg = SpeciesParser(pure_water_speciation)
    frezchem = PhreeqcGeneratorForChemicalConstraint(aqueous_species_list, speciation_ratio_mol_kg, "frezchem.dat",)
    rkt_T_freezing = rkt_t_freeze_without_pressure_correction(aqueous_species_list, speciation_ratio_mol_kg, eos_P_MPa, frezchem, 100, 0, {})

    sfz_T_freezing = np.array(sfz_T_freezing)
    rkt_T_freezing = np.array(rkt_T_freezing, dtype = np.float64)

    difference_in_T_freezings = rkt_T_freezing - sfz_T_freezing

    directory = 'Reaktoro_Saved_Files'
    file_path = os.path.join(directory, 'rkt_temperature_correction.pkl')

    # Ensure the directory exists
    os.makedirs(directory, exist_ok=True)

    dictionary_to_save = {"P_MPa": eos_P_MPa, "Difference_in_T_freezings_K": difference_in_T_freezings}
    with open(file_path, 'wb') as f:
        pickle.dump(dictionary_to_save, f)

def rkt_t_freeze_without_pressure_correction(aqueous_species_list, speciation_ratio_mol_kg, P_MPa, frezchem, PMax_MPa, freezing_temperature_spline, calculated_freezing_temperatures, TMin_K = 250, TMax_K = 300, significant_threshold = 0.1):
    """
     Calculates the temperature at which the prescribed aqueous solution freezes. Utilizes the reaktoro framework to
     constrain the equilibrium position at the prescribed pressure, the lower and upper limits of temperature (in K),
     and the total amount of ice at a significant threshold of 1e-14, therefore calculating and returning the
     temperature (within the range) at which ice begins to form.

     Parameters
     ----------
     aqueous_species_list: aqueous species in reaction. Should be formatted in one long string with a space in between each species
     speciation_ratio_mol_kg: the ratio of species in the aqueous solution in mol/kg of water. Should be a dictionary
     with the species as the key and its ratio as its value.
     P_MPa: the desired equilibrium freezing pressure(s).
     TMin_K: the lower limit of temperature that Reaktoro should query over
     TMax_K: the upper limit of temperature that Reaktoro should query over
     database: the Phreeqc database to be using in this calculation (either frezchem.dat or core10.dat)
     significant_threshold: the amount of moles of ice present for H2O to be considered in solid phase. Default is 1e-14 moles.

     Returns
     -------
     t_freezing_K: the temperature at which the solution begins to freeze.
     """
    # Disable chemical convergence warnings that Reaktoro raises. We handle these internally instead and throw more specific warnings when they appear.
    # rkt.Warnings.disable(906)
    # Create list that holds boolean values of whether ice is present
    freezing_temperatures = []
    db, system, state, conditions, solver, props = frezchem
    state = rkt.ChemicalState(state)
    # Create an iterator to go through P_MPa
    it = np.nditer([P_MPa])
    conditions.set("IP", significant_threshold)
    conditions.setLowerBoundTemperature(TMin_K, "K")
    conditions.setUpperBoundTemperature(TMax_K, "K")
    for P in it:
        P = float(P)
        # Adjust Pressure
        if P in calculated_freezing_temperatures.keys():
            equilibrium_temperature = calculated_freezing_temperatures[P]
            freezing_temperatures.append(equilibrium_temperature)
            continue
        # Check that pressure is below PMax_MPa, the maximum pressure constraint calculated previously
        if P <= PMax_MPa:
            # Specify equilibrium constraints
            conditions.pressure(P, "MPa")
            # Solve the equilibrium problem
            result = solver.solve(state, conditions)
            # Update the properties
            props.update(state)
            # Obtain the equilibrium temperature
            equilibrium_temperature = props.temperature()
            # Check if the result succeeded
            if result.succeeded():
                state = reset_state(system, speciation_ratio_mol_kg)
            # If the result failed, we will use spline
            else:
                log.warning(f"While attempting to find bottom freezing temperature for pressure of {P_MPa} MPa, \n"
                            +f"Reaktoro was unable to find a temperature within range of {TMin_K} K and {TMax_K}.\n"
                            +f"Instead, we will use a spline of freezing temperatures that we generated for this EOS to find the associated freezing temperature.")
                equilibrium_temperature = freezing_temperature_spline(P)
                state = reset_state(system, speciation_ratio_mol_kg)
        # If Pressure is >= PMax, Reaktoro is at its limits of computation and will likely fail. Thus, we utilize our spline approximation of freezing temperatures
        # over a range of pressures that we are confident that Frezchem works at and find the associated freezing temperature at the given pressure.
        # If the temperature we are querying over is less than that freezing temperature, then we assume its ice, otherwise we assume its liquid
        else:
            equilibrium_temperature = freezing_temperature_spline(P)
        freezing_temperatures.append(equilibrium_temperature)
        calculated_freezing_temperatures[P] = equilibrium_temperature
    # Return the equilibrium temperature
    return np.array(freezing_temperatures)


dictionary_pressure_correction_generator()
